import { Button, VerticalBox , HorizontalBox} from "std-widgets.slint";

component ScreenButton inherits Rectangle {
    in-out property <{ 
        name: string,
        width: length,
        wide: bool,
        images: [image]
    }> data;
    
    in-out property <string> selected;
    
    private property <bool> isSelected: selected == data.name;

    callback toggled;

    TouchArea {
        width: parent.width;
        height: parent.height;
        mouse-cursor: pointer;

        clicked => {
            parent.selected = data.name;
            parent.toggled();
        }
    }
    
    height: 100px;
    background: isSelected ? #aaaaff40 : #aaaaff20;
    border-color: isSelected ? #B469D7 : #aaaaff30;
    border-radius: 5px;
    border-width: 2px;
    clip: true;

    VerticalLayout {
        alignment: center;
        spacing: 5px;
        width: data.width;
        height: 65px;

        HorizontalLayout {
            alignment: center;
            spacing: 5px;

            for image in data.images: VerticalLayout {
                if !data.wide: Rectangle { 
                    clip: true;
                    border-radius: 5px;

                    Image {
                        source: image;
                        width: parent.width;
                        height: 45px;
                    }
                }
                if data.wide: Rectangle { 
                    clip: true;
                    width: data.width;
                    border-radius: 5px;

                    Image {
                        source: image;
                        width: data.width;
                        height: 45px;
                    }
                }
            }
        }

        txt := Text {
            text: data.name;
            font-size: 12px;
            horizontal-alignment: center;
        }
    }
}

export component Aerial inherits Window {
    default-font-size: 14px;
    title: "Aerial";
    width: 540px;
    
    in-out property<string> selected: "Choose a Screen Layout...";
    
    callback runClicked(string);

    in property <[{ 
        name: string,
        screens: [{ 
            name: string,
            width: length,
            wide: bool,
            images: [image]
        }]
    }]> model: [{
        name: "16:9 Virtual Screens",
        screens: [{ 
            name: "A Screen",
            width: 80px,
            images: [
                @image-url("./images/kde_wallpaper_primary.png")
            ]
        }, { 
            name: "Dual Screen", 
            width: 160px,
            images: [
                @image-url("./images/kde_wallpaper_primary.png"), 
                @image-url("./images/kde_wallpaper.png")
            ]
        }, {
            name: "Triple Screen", 
            width: 240px,
            images: [
                @image-url("./images/kde_wallpaper.png"), 
                @image-url("./images/kde_wallpaper_primary.png"), 
                @image-url("./images/kde_wallpaper.png")
            ]
        }]
    }, {
        name: "Wide Virtual Screens",
        screens: [{ 
            name: "Wide Screen", 
            width: 125px,
            wide: true,
            images: [
                @image-url("./images/kde_wallpaper_primary.png")
            ]
        }, { 
            name: "Ultra Wide Screen",
            width: 175px,
            wide: true,
            images: [
                @image-url("./images/kde_wallpaper_primary.png")
            ]
        }]
    }];

    VerticalLayout {
        alignment: start;
        padding: 20px;
        spacing: 20px;

        Text {
            text: "Set Virtual Screen Layout";
            font-size: 24px;
            horizontal-alignment: center;
        }
        VerticalLayout {
            spacing: 20px;

            Rectangle {
                background: #aa66ff10;
                border-radius: 5px;
                border-color: #aaaaff30;
                border-width: 1px;

                VerticalLayout {
                    padding: 20px;
                    spacing: 20px;

                    for layout in root.model: VerticalLayout {
                        spacing: 20px;

                        Text {
                            text: layout.name;
                            font-size: 20px;
                            horizontal-alignment: center;
                        }

                        HorizontalLayout {
                            spacing: 10px;

                            for data in layout.screens: ScreenButton {
                                selected <=> root.selected;
                                data: data;

                                toggled => {
                                    root.selected = self.selected;
                                }
                            }
                        }
                    }
                }
            }
            Rectangle {
                background: #aa66ff10;
                border-radius: 5px;
                border-color: #aaaaff30;
                border-width: 1px;

                VerticalLayout {
                    padding: 20px;
                    spacing: 20px;

                    Text {
                        font-size: 20px;
                        text: root.selected;
                        horizontal-alignment: center;
                    }

                    HorizontalLayout {
                        alignment: center;
                        
                        Button {
                            width: 100%;
                            height: 40px;
                            text: "Start AR Desktop";
                            enabled: root.selected != "Choose a Screen Layout...";
                            clicked => {
                                runClicked(root.selected);
                            }
                        } 
                    }
                }
            }
        }
    }
}
